/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedOnboardCompanyRouteImport } from './routes/_authenticated/onboard-company'
import { Route as AuthenticatedOnboardRouteImport } from './routes/_authenticated/onboard'
import { Route as AuthenticatedManageRouteImport } from './routes/_authenticated/manage'
import { Route as AuthenticatedLogoutRouteImport } from './routes/_authenticated/logout'
import { Route as AuthenticatedAppRouteImport } from './routes/_authenticated/app'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedOnboardCompanyRoute =
  AuthenticatedOnboardCompanyRouteImport.update({
    id: '/onboard-company',
    path: '/onboard-company',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedOnboardRoute = AuthenticatedOnboardRouteImport.update({
  id: '/onboard',
  path: '/onboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedManageRoute = AuthenticatedManageRouteImport.update({
  id: '/manage',
  path: '/manage',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedLogoutRoute = AuthenticatedLogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedAppRoute = AuthenticatedAppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => AuthenticatedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/app': typeof AuthenticatedAppRoute
  '/logout': typeof AuthenticatedLogoutRoute
  '/manage': typeof AuthenticatedManageRoute
  '/onboard': typeof AuthenticatedOnboardRoute
  '/onboard-company': typeof AuthenticatedOnboardCompanyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/app': typeof AuthenticatedAppRoute
  '/logout': typeof AuthenticatedLogoutRoute
  '/manage': typeof AuthenticatedManageRoute
  '/onboard': typeof AuthenticatedOnboardRoute
  '/onboard-company': typeof AuthenticatedOnboardCompanyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/app': typeof AuthenticatedAppRoute
  '/_authenticated/logout': typeof AuthenticatedLogoutRoute
  '/_authenticated/manage': typeof AuthenticatedManageRoute
  '/_authenticated/onboard': typeof AuthenticatedOnboardRoute
  '/_authenticated/onboard-company': typeof AuthenticatedOnboardCompanyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/app'
    | '/logout'
    | '/manage'
    | '/onboard'
    | '/onboard-company'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/app'
    | '/logout'
    | '/manage'
    | '/onboard'
    | '/onboard-company'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/app'
    | '/_authenticated/logout'
    | '/_authenticated/manage'
    | '/_authenticated/onboard'
    | '/_authenticated/onboard-company'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/onboard-company': {
      id: '/_authenticated/onboard-company'
      path: '/onboard-company'
      fullPath: '/onboard-company'
      preLoaderRoute: typeof AuthenticatedOnboardCompanyRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/onboard': {
      id: '/_authenticated/onboard'
      path: '/onboard'
      fullPath: '/onboard'
      preLoaderRoute: typeof AuthenticatedOnboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/manage': {
      id: '/_authenticated/manage'
      path: '/manage'
      fullPath: '/manage'
      preLoaderRoute: typeof AuthenticatedManageRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/logout': {
      id: '/_authenticated/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof AuthenticatedLogoutRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/app': {
      id: '/_authenticated/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AuthenticatedAppRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedAppRoute: typeof AuthenticatedAppRoute
  AuthenticatedLogoutRoute: typeof AuthenticatedLogoutRoute
  AuthenticatedManageRoute: typeof AuthenticatedManageRoute
  AuthenticatedOnboardRoute: typeof AuthenticatedOnboardRoute
  AuthenticatedOnboardCompanyRoute: typeof AuthenticatedOnboardCompanyRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAppRoute: AuthenticatedAppRoute,
  AuthenticatedLogoutRoute: AuthenticatedLogoutRoute,
  AuthenticatedManageRoute: AuthenticatedManageRoute,
  AuthenticatedOnboardRoute: AuthenticatedOnboardRoute,
  AuthenticatedOnboardCompanyRoute: AuthenticatedOnboardCompanyRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
